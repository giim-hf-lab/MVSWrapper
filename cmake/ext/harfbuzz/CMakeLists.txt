get_ext_version(freetype __L_FREETYPE_VERSION)
string(REPLACE "." "-" __L_FREETYPE_VERSION_STRING "${__L_FREETYPE_VERSION}")
set(__L_FREETYPE_TAG "VER-${__L_FREETYPE_VERSION_STRING}")
FetchContent_Declare(freetype
	GIT_REPOSITORY "${__G_GITHUB_PREFIX}freetype/freetype.git"
	GIT_TAG "${__L_FREETYPE_TAG}"
	GIT_SUBMODULES_RECURSE TRUE
	GIT_SHALLOW "${__G_FETCHCONTENT_GIT_SHALLOW}"
	GIT_REMOTE_UPDATE_STRATEGY CHECKOUT
)
FetchContent_Populate(freetype)
FetchContent_GetProperties(freetype SOURCE_DIR __L_FREETYPE_SOURCE_DIR BINARY_DIR __L_FREETYPE_BINARY_DIR)

get_ext_version(harfbuzz __L_HARFBUZZ_VERSION)
FetchContent_Declare(harfbuzz
	GIT_REPOSITORY "${__G_GITHUB_PREFIX}harfbuzz/harfbuzz.git"
	GIT_TAG "${__L_HARFBUZZ_VERSION}"
	GIT_SUBMODULES_RECURSE TRUE
	GIT_SHALLOW "${__G_FETCHCONTENT_GIT_SHALLOW}"
	GIT_REMOTE_UPDATE_STRATEGY CHECKOUT
)
FetchContent_Populate(harfbuzz)
FetchContent_GetProperties(harfbuzz SOURCE_DIR __L_HARFBUZZ_SOURCE_DIR BINARY_DIR __L_HARFBUZZ_BINARY_DIR)

find_package(Freetype "${__L_FREETYPE_VERSION}" QUIET GLOBAL BYPASS_PROVIDER)
ext_compile_install(harfbuzz "C" "${__L_HARFBUZZ_SOURCE_DIR}" "" "${__L_HARFBUZZ_BINARY_DIR}"
	"-D" "HB_HAVE_FREETYPE:BOOL=${FREETYPE_FOUND}"
	"-D" "HB_HAVE_UNISCRIBE:BOOL=TRUE"
	"-D" "HB_HAVE_GDI:BOOL=TRUE"
	"-D" "HB_HAVE_DIRECTWRITE:BOOL=TRUE"
)

ext_compile_install(Freetype "C" "${__L_FREETYPE_SOURCE_DIR}" "" "${__L_FREETYPE_BINARY_DIR}"
	"-D" "BUILD_SHARED_LIBS:BOOL=FALSE"
	"-D" "ZLIB_USE_STATIC_LIBS:BOOL=TRUE"
	"-D" "FT_REQUIRE_ZLIB:BOOL=TRUE"
	"-D" "FT_REQUIRE_PNG:BOOL=TRUE"
	"-D" "FT_REQUIRE_HARFBUZZ:BOOL=TRUE"
	"-D" "FT_ENABLE_ERROR_STRINGS:BOOL=TRUE"
)

if (NOT FREETYPE_FOUND)
	ext_compile_install(harfbuzz "C" "${__L_HARFBUZZ_SOURCE_DIR}" "" "${__L_HARFBUZZ_BINARY_DIR}"
		"-D" "HB_HAVE_FREETYPE:BOOL=TRUE"
		"-D" "HB_HAVE_UNISCRIBE:BOOL=TRUE"
		"-D" "HB_HAVE_GDI:BOOL=TRUE"
		"-D" "HB_HAVE_DIRECTWRITE:BOOL=TRUE"
	)
	find_package(Freetype "${__L_FREETYPE_VERSION}" REQUIRED GLOBAL BYPASS_PROVIDER)
endif ()

find_package(harfbuzz REQUIRED GLOBAL BYPASS_PROVIDER)
