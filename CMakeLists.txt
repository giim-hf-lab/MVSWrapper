cmake_minimum_required(VERSION 3.14)
cmake_policy(VERSION 3.14)
project(inferences LANGUAGES CXX C CUDA VERSION 0.0)

include(CMakeDependentOption)
include(ExternalProject)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

if (onnxruntime_PREFIX)
	list(APPEND CMAKE_PREFIX_PATH ${onnxruntime_PREFIX})
endif ()

cmake_dependent_option(
	${CMAKE_PROJECT_NAME}_USE_SYSTEM_ONNXRUNTIME "Build with system ONNX Runtime." OFF
	"onnxruntime_FOUND" OFF
)
cmake_dependent_option(
	${CMAKE_PROJECT_NAME}_USE_SYSTEM_TORCH "Build with system Torch." OFF
	"Torch_FOUND;TorchVision_FOUND" OFF
)

option(${CMAKE_PROJECT_NAME}_BUILD_EXAMPLES "Build examples of the framework." OFF)
option(${CMAKE_PROJECT_NAME}_BUILD_INTERNAL "Build internal applications." OFF)

message(STATUS "Building with system ONNX Runtime: ${${CMAKE_PROJECT_NAME}_USE_SYSTEM_ONNXRUNTIME}.")
message(STATUS "Building with system Torch: ${${CMAKE_PROJECT_NAME}_USE_SYSTEM_TORCH}.")

message(STATUS "Building examples of the framework: ${${CMAKE_PROJECT_NAME}_BUILD_EXAMPLES}.")
message(STATUS "Building internal applications: ${${CMAKE_PROJECT_NAME}_BUILD_INTERNAL}.")

list(APPEND DEPENDENCIES_LANGUAGE_ARGS
	-DCMAKE_C_STANDARD:STRING=17
	-DCMAKE_CXX_STANDARD:STRING=20
	-DCMAKE_CUDA_STANDARD:STRING=17
)

if (NOT ${CMAKE_PROJECT_NAME}_USE_SYSTEM_ONNXRUNTIME)
	ExternalProject_Add(onnxruntime
		PREFIX
			${CMAKE_CURRENT_BINARY_DIR}/onnxruntime
		SOURCE_DIR
			${CMAKE_CURRENT_SOURCE_DIR}/externals/onnxruntime/cmake
		INSTALL_DIR
			${CMAKE_INSTALL_PREFIX}/onnxruntime
		CMAKE_ARGS
			--toolchain ${CMAKE_TOOLCHAIN_FILE}
			-Wno-dev
		CMAKE_CACHE_ARGS
			-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
			-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
			-Donnxruntime_USE_CUDA:BOOL=ON
			-Donnxruntime_BUILD_UNIT_TESTS:BOOL=OFF
			-Donnxruntime_USE_AVX:BOOL=ON
			-Donnxruntime_USE_AVX2:BOOL=ON
			-Donnxruntime_USE_AVX512:BOOL=ON
			-Donnxruntime_BUILD_SHARED_LIB:BOOL=ON
			-Donnxruntime_ENABLE_LTO:BOOL=ON
			-Donnxruntime_USE_NCCL:BOOL=ON
			-Donnxruntime_CUDNN_HOME:PATH=/usr
		CMAKE_CACHE_DEFAULT_ARGS
			${DEPENDENCIES_LANGUAGE_ARGS}
		USES_TERMINAL_CONFIGURE ON
		USES_TERMINAL_BUILD ON
		USES_TERMINAL_INSTALL ON
		EXCLUDE_FROM_ALL
	)

	list(APPEND FRAMEWORK_DEPENDENCIES onnxruntime)
	list(APPEND FRAMEWORK_DEPENDENCIES_CMAKE_CACHE_ARGS
		-Donnxruntime_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}/onnxruntime
	)
endif ()

if (NOT ${CMAKE_PROJECT_NAME}_USE_SYSTEM_TORCH)
	ExternalProject_Add(torch
		PREFIX
			${CMAKE_CURRENT_BINARY_DIR}/torch
		SOURCE_DIR
			${CMAKE_CURRENT_SOURCE_DIR}/externals/torch/pytorch
		INSTALL_DIR
			${CMAKE_INSTALL_PREFIX}/torch
		CMAKE_ARGS
			--toolchain ${CMAKE_TOOLCHAIN_FILE}
			-Wno-dev
		CMAKE_CACHE_ARGS
			-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
			-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
			-DATEN_NO_TEST:BOOL=ON
			-DBUILD_PYTHON:BOOL=OFF
			-DBUILD_CAFFE2:BOOL=ON
			-DBUILD_CAFFE2_OPS:BOOL=ON
			-DBUILD_LAZY_CUDA_LINALG:BOOL=OFF
			-DBUILD_NVFUSER_BENCHMARK:BOOL=OFF
			-DUSE_KINETO:BOOL=OFF
			-DUSE_NVRTC:BOOL=ON
			-DUSE_C10D_NCCL:BOOL=ON
			-DUSE_NCCL_WITH_UCC:BOOL=ON
			-DUSE_LITE_INTERPRETER_PROFILER:BOOL=OFF
			-DUSE_STATIC_MKL:BOOL=ON
			-DUSE_DISTRIBUTED:BOOL=OFF
		CMAKE_CACHE_DEFAULT_ARGS
			${DEPENDENCIES_LANGUAGE_ARGS}
		USES_TERMINAL_CONFIGURE ON
		USES_TERMINAL_BUILD ON
		USES_TERMINAL_INSTALL ON
		EXCLUDE_FROM_ALL
	)
	ExternalProject_Add(torchvision
		DEPENDS
			torch
		PREFIX
			${CMAKE_CURRENT_BINARY_DIR}/torchvision
		SOURCE_DIR
			${CMAKE_CURRENT_SOURCE_DIR}/externals/torch/vision
		INSTALL_DIR
			${CMAKE_INSTALL_PREFIX}/torchvision
		CMAKE_ARGS
			--toolchain ${CMAKE_TOOLCHAIN_FILE}
			-Wno-dev
		CMAKE_CACHE_ARGS
			-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
			-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
			-DTorch_DIR:PATH=${CMAKE_INSTALL_PREFIX}/torch/share/cmake/Torch
			-DWITH_CUDA:BOOL=ON
		CMAKE_CACHE_DEFAULT_ARGS
			${DEPENDENCIES_LANGUAGE_ARGS}
		USES_TERMINAL_CONFIGURE ON
		USES_TERMINAL_BUILD ON
		USES_TERMINAL_INSTALL ON
		EXCLUDE_FROM_ALL
	)

	list(APPEND FRAMEWORK_DEPENDENCIES torch torchvision)
	list(APPEND FRAMEWORK_DEPENDENCIES_CMAKE_CACHE_ARGS
		-DTorch_DIR:PATH=${CMAKE_INSTALL_PREFIX}/torch/share/cmake/Torch
		-DTorchVision_DIR:PATH=${CMAKE_INSTALL_PREFIX}/torchvision/share/cmake/TorchVision
	)
endif ()

ExternalProject_Add(clipper
	PREFIX
		${CMAKE_CURRENT_BINARY_DIR}/clipper
	SOURCE_DIR
		${CMAKE_CURRENT_SOURCE_DIR}/third_party/clipper/CPP
	INSTALL_DIR
		${CMAKE_INSTALL_PREFIX}/clipper
	CMAKE_ARGS
		--toolchain ${CMAKE_TOOLCHAIN_FILE}
		-Wno-dev
	CMAKE_CACHE_ARGS
		-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
		-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
		-DCLIPPER2_UTILS:BOOL=OFF
		-DCLIPPER2_EXAMPLES:BOOL=OFF
		-DCLIPPER2_TESTS:BOOL=OFF
	CMAKE_CACHE_DEFAULT_ARGS
		${DEPENDENCIES_LANGUAGE_ARGS}
	USES_TERMINAL_CONFIGURE ON
	USES_TERMINAL_BUILD ON
	USES_TERMINAL_INSTALL ON
	EXCLUDE_FROM_ALL
)

ExternalProject_Add(fmt
	PREFIX
		${CMAKE_CURRENT_BINARY_DIR}/fmt
	SOURCE_DIR
		${CMAKE_CURRENT_SOURCE_DIR}/third_party/fmt
	INSTALL_DIR
		${CMAKE_INSTALL_PREFIX}/fmt
	CMAKE_ARGS
		--toolchain ${CMAKE_TOOLCHAIN_FILE}
		-Wno-dev
	CMAKE_CACHE_ARGS
		-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
		-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
		-DFMT_DOC:BOOL=OFF
		-DFMT_TEST:BOOL=OFF
	CMAKE_CACHE_DEFAULT_ARGS
		${DEPENDENCIES_LANGUAGE_ARGS}
	USES_TERMINAL_CONFIGURE ON
	USES_TERMINAL_BUILD ON
	USES_TERMINAL_INSTALL ON
	EXCLUDE_FROM_ALL
)

ExternalProject_Add(mio
	PREFIX
		${CMAKE_CURRENT_BINARY_DIR}/mio
	SOURCE_DIR
		${CMAKE_CURRENT_SOURCE_DIR}/third_party/mio
	INSTALL_DIR
		${CMAKE_INSTALL_PREFIX}/mio
	CMAKE_ARGS
		--toolchain ${CMAKE_TOOLCHAIN_FILE}
		-Wno-dev
	CMAKE_CACHE_ARGS
		-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
		-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
	CMAKE_CACHE_DEFAULT_ARGS
		${DEPENDENCIES_LANGUAGE_ARGS}
	USES_TERMINAL_CONFIGURE ON
	USES_TERMINAL_BUILD ON
	USES_TERMINAL_INSTALL ON
	EXCLUDE_FROM_ALL
)

ExternalProject_Add(nlohmann_json
	PREFIX
		${CMAKE_CURRENT_BINARY_DIR}/nlohmann_json
	SOURCE_DIR
		${CMAKE_CURRENT_SOURCE_DIR}/third_party/nlohmann_json
	INSTALL_DIR
		${CMAKE_INSTALL_PREFIX}/nlohmann_json
	CMAKE_ARGS
		--toolchain ${CMAKE_TOOLCHAIN_FILE}
		-Wno-dev
	CMAKE_CACHE_ARGS
		-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
		-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
		-DJSON_BuildTests:BOOL=OFF
		-DJSON_GlobalUDLs:BOOL=OFF
	CMAKE_CACHE_DEFAULT_ARGS
		${DEPENDENCIES_LANGUAGE_ARGS}
	USES_TERMINAL_CONFIGURE ON
	USES_TERMINAL_BUILD ON
	USES_TERMINAL_INSTALL ON
	EXCLUDE_FROM_ALL
)

ExternalProject_Add(${CMAKE_PROJECT_NAME}
	DEPENDS
		${FRAMEWORK_DEPENDENCIES}
		clipper
		fmt
		mio
		nlohmann_json
	PREFIX
		${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}
	SOURCE_DIR
		${CMAKE_CURRENT_SOURCE_DIR}/${CMAKE_PROJECT_NAME}
	INSTALL_DIR
		${CMAKE_INSTALL_PREFIX}/${CMAKE_PROJECT_NAME}
	CMAKE_ARGS
		--toolchain ${CMAKE_TOOLCHAIN_FILE}
	CMAKE_CACHE_ARGS
		-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
		-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
		-DMASTER_PROJECT_VERSION:STRING=${CMAKE_PROJECT_VERSION}
		${FRAMEWORK_DEPENDENCIES_CMAKE_CACHE_ARGS}
		-DCLIPPER_INSTALL_DIR:PATH=${CMAKE_INSTALL_PREFIX}/clipper
		-Dfmt_DIR:PATH=${CMAKE_INSTALL_PREFIX}/fmt/lib/cmake/fmt
		-Dmio_DIR:PATH=${CMAKE_INSTALL_PREFIX}/mio/share/cmake/mio
		-Dnlohmann_json_DIR:PATH=${CMAKE_INSTALL_PREFIX}/nlohmann_json/share/cmake/nlohmann_json
	USES_TERMINAL_CONFIGURE ON
	USES_TERMINAL_BUILD ON
	USES_TERMINAL_INSTALL ON
)

ExternalProject_Add(argparse
	PREFIX
		${CMAKE_CURRENT_BINARY_DIR}/argparse
	SOURCE_DIR
		${CMAKE_CURRENT_SOURCE_DIR}/third_party/argparse
	INSTALL_DIR
		${CMAKE_INSTALL_PREFIX}/argparse
	CMAKE_ARGS
		--toolchain ${CMAKE_TOOLCHAIN_FILE}
		-Wno-dev
	CMAKE_CACHE_ARGS
		-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
		-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
	CMAKE_CACHE_DEFAULT_ARGS
		${DEPENDENCIES_LANGUAGE_ARGS}
	USES_TERMINAL_CONFIGURE ON
	USES_TERMINAL_BUILD ON
	USES_TERMINAL_INSTALL ON
	EXCLUDE_FROM_ALL
)

ExternalProject_Add(spdlog
	DEPENDS
		fmt
	PREFIX
		${CMAKE_CURRENT_BINARY_DIR}/spdlog
	SOURCE_DIR
		${CMAKE_CURRENT_SOURCE_DIR}/third_party/spdlog
	INSTALL_DIR
		${CMAKE_INSTALL_PREFIX}/spdlog
	CMAKE_ARGS
		--toolchain ${CMAKE_TOOLCHAIN_FILE}
		-Wno-dev
	CMAKE_CACHE_ARGS
		-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
		-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
		-DSPDLOG_BUILD_EXAMPLE:BOOL=OFF
		-DSPDLOG_FMT_EXTERNAL:BOOL=ON
		-Dfmt_DIR:PATH=${CMAKE_INSTALL_PREFIX}/fmt/lib/cmake/fmt
	CMAKE_CACHE_DEFAULT_ARGS
		${DEPENDENCIES_LANGUAGE_ARGS}
	USES_TERMINAL_CONFIGURE ON
	USES_TERMINAL_BUILD ON
	USES_TERMINAL_INSTALL ON
	EXCLUDE_FROM_ALL
)

if (${CMAKE_PROJECT_NAME}_BUILD_EXAMPLES)
	ExternalProject_Add(examples
		DEPENDS
			${CMAKE_PROJECT_NAME}
			${FRAMEWORK_DEPENDENCIES}
			argparse
			fmt
			spdlog
		PREFIX
			${CMAKE_CURRENT_BINARY_DIR}/examples
		SOURCE_DIR
			${CMAKE_CURRENT_SOURCE_DIR}/examples
		INSTALL_DIR
			${CMAKE_INSTALL_PREFIX}/examples
		CMAKE_ARGS
			--toolchain ${CMAKE_TOOLCHAIN_FILE}
		CMAKE_CACHE_ARGS
			-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
			-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
			-DMASTER_PROJECT_VERSION:STRING=${CMAKE_PROJECT_VERSION}
			${FRAMEWORK_DEPENDENCIES_CMAKE_CACHE_ARGS}
			-DCLIPPER_INSTALL_DIR:PATH=${CMAKE_INSTALL_PREFIX}/clipper
			-Dargparse_DIR:PATH=${CMAKE_INSTALL_PREFIX}/argparse/lib/cmake/argparse
			-Dfmt_DIR:PATH=${CMAKE_INSTALL_PREFIX}/fmt/lib/cmake/fmt
			-Dspdlog_DIR:PATH=${CMAKE_INSTALL_PREFIX}/spdlog/lib/cmake/spdlog
			-D${CMAKE_PROJECT_NAME}_DIR:PATH=${CMAKE_INSTALL_PREFIX}/${CMAKE_PROJECT_NAME}/share/cmake/${CMAKE_PROJECT_NAME}
		USES_TERMINAL_CONFIGURE ON
		USES_TERMINAL_BUILD ON
		USES_TERMINAL_INSTALL ON
	)
endif ()
